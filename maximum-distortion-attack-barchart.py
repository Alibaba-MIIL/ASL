"""
=============================
Grouped bar chart with labels
=============================

This example shows a how to create a grouped bar chart and how to annotate
bars with labels.
"""

import matplotlib.pyplot as plt
import numpy as np


labels = ['\u03B3 = 0', '\u03B3 = 0.25', '\u03B3 = 0.5', '\u03B3 = 0.75', '\u03B3 = 1', 'random']


# Q2L COCO
# _5_targets = [(0.008209745762711865, 0.005895453686303958), (0.008152173913043478, 0.005632854603185122), (0.008541277985074628, 0.005187670830819645), (0.010887632978723404, 0.00589956500774695), (0.011799015410958904, 0.006004188957969162), (0.019583333333333335, 0.007877162952520124)]
# _10_targets = [(0.015442708333333333, 0.008098120937415906), (0.015364583333333333, 0.008051887934239743), (0.016490142617449664, 0.007691566597146172), (0.018307291666666666, 0.007814279311268178), (0.0190625, 0.00747881121485895), (0.0334375, 0.010009760861279355)]
# _20_targets = [(0.034869791666666664, 0.01436379110850198), (0.03169270833333333, 0.011645051824180398), (0.031197916666666665, 0.011212925987510525), (0.033125, 0.011027531242871182), (0.03380208333333334, 0.01089077320359864), (0.059453125, 0.01792833997750373)]
# _40_targets = [(0.090625, 0.028715587421076726), (0.07682291666666667, 0.023121421926640285), (0.07203125, 0.02208548289459617), (0.069921875, 0.019757800658194685), (0.07330729166666666, 0.019213120929250767), (0.12497395833333333, 0.031969251058444385)]

# ASL COCO
# _5_targets = [(0.004583333333333333, 0.0017898791955666233), (0.004427083333333333, 0.0017853267188544385), (0.004430578859060403, 0.0014064333662963148), (0.006265729865771812, 0.011120779014214065), (0.007462284482758621, 0.013554314775657383), (0.009557291666666667, 0.003841565125420526)]
# _10_targets = [(0.008046875, 0.004626996683302428), (0.0075241191275167785, 0.004295658378411083), (0.008441694630872484, 0.005919229282193122), (0.009738498263888888, 0.004850075320192679), (0.01050646551724138, 0.00588432620975218), (0.016979166666666667, 0.005651461677939808)]
# _20_targets = [(0.01515625, 0.005862325645950304), (0.015864158163265307, 0.00611678573020889), (0.01604446308724832, 0.0052805148723008505), (0.01705025337837838, 0.005817854165370219), (0.01748636744966443, 0.005553556033109185), (0.024505208333333334, 0.007073033642258029)]
# _40_targets = [(0.028307291666666668, 0.007850644725934757), (0.028072916666666666, 0.007416893430522122), (0.027369791666666667, 0.007418401965181847), (0.027942708333333333, 0.007027439167910353), (0.027786458333333333, 0.007527843642406096), (0.03651041666666666, 0.008438303716864874)]

# # Q2L NUSWIDE
_5_targets = [(0.011173691860465117, 0.007201852462019839), (0.01180752840909091, 0.007016864840275386), (0.012507891414141414, 0.006956316255564168), (0.016183035714285716, 0.008277007240062124), (0.0178515625, 0.00795293697592083), (0.0334375, 0.01407681563000844)]
_10_targets = [(0.02796875, 0.016027244260750195), (0.0270703125, 0.011954082375875565), (0.02890625, 0.013338571155440525), (0.0325, 0.013963191007968057), (0.0410546875, 0.01690549003317321), (0.061328125, 0.021427481487347622)]
_20_targets = [(0.0740625, 0.033273913510624205), (0.069921875, 0.030214786936355768), (0.074453125, 0.03374249410169801), (0.0805078125, 0.03332878336052741), (0.0997265625, 0.03964585890629649), (0.13659917091836735, 0.04634537532790003)]
_40_targets = [(0.2511625744047619, 0.07420107618195766), (0.24048713235294117, 0.07103753802201204), (0.24593955592105263, 0.06971442687229497), (0.29239430147058826, 0.05490562095515918), (0.30916078629032256, 0.05520638223820083), (0.3268229166666667, 0.04222044110027025)]


_5_means = [x for x,y in _5_targets]
_5_stds = [y for x,y in _5_targets]

_10_means = [x for x,y in _10_targets]
_10_stds = [y for x,y in _10_targets]

_20_means = [x for x,y in _20_targets]
_20_stds = [y for x,y in _20_targets]

_40_means = [x for x,y in _40_targets]
_40_stds = [y for x,y in _40_targets]


x = np.arange(len(labels))  # the label locations
width = 0.20  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - 3 * width/2, _5_means, width, yerr=_5_stds, label='5 flips')
rects2 = ax.bar(x - 1 * width/2, _10_means, width, yerr=_10_stds, label='10 flips')
rects3 = ax.bar(x + 1 * width/2, _20_means, width, yerr=_20_stds, label='20 flips')
rects4 = ax.bar(x + 3 * width/2, _40_means, width, yerr=_40_stds, label='40 flips')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('required \u03B5')
# ax.set_xlabel('Gamma')
ax.set_xticks(x, labels)
ax.set_title('Correlation attacks with different gamma value, {0}'.format("Q2l, NUSWIDE"))
ax.legend()

# ax.bar_label(rects1, padding=3)
# ax.bar_label(rects2, padding=3)
# ax.bar_label(rects3, padding=3)
# ax.bar_label(rects4, padding=3)

fig.tight_layout()

plt.show()

#############################################################################
#
# .. admonition:: References
#
#    The use of the following functions, methods, classes and modules is shown
#    in this example:
#
#    - `matplotlib.axes.Axes.bar` / `matplotlib.pyplot.bar`
#    - `matplotlib.axes.Axes.bar_label` / `matplotlib.pyplot.bar_label`
